Awesome—let’s freeze a **clean, production-ready end-state** before coding. Below you’ll find:

1. What the tool must do
2. Final package layout (lean, no DNEG-specific code baked in)
3. Key classes with responsibilities + main methods + patterns
4. A single, **compilable PlantUML** class graph for the whole system
5. Run-time lifecycles (local / remote / farm via plugin)
6. CLI surface (ergonomic & scriptable)
7. Qt UI architecture (MVVM, themed, no hardcoded styles)

---

## 1) Capabilities we’re building

* Load workflow **templates**; fill parameters; run **locally** or **remote**; optionally dispatch to a **farm via plugin** (separate package).
* **Start/stop a local ComfyUI server** when needed (not in constructors).
* **Compile** our graph → ComfyUI JSON payload.
* Connect to ComfyUI via **HTTP POST + WebSocket** for progress/events.
* Clean **CLI** for automation + a **Qt UI** to browse templates, edit params, and run (local/farm).
* Strong **validation**, **logging**, **progress**, and **error taxonomy**.

---

## 2) Final package layout (repo skeleton)

```
comfyui-remote/
├─ src/comfyui_remote/
│  ├─ core/
│  │  ├─ base/
│  │  │  ├─ executor.py              # IExecutor, ExecutorBase
│  │  │  ├─ connector.py             # IConnector
│  │  │  ├─ workflow.py              # abstract types shared by workflows
│  │  │  ├─ handler.py               # IO handler base classes
│  │  │  └─ observer.py              # IProgressObserver
│  │  ├─ exceptions/                 # execution/workflow/node exceptions
│  │  └─ types/                      # enums, typed aliases
│  │
│  ├─ nodes/
│  │  ├─ core/                       # Node Core API (the Facade)
│  │  │  ├─ node_core_api.py         # NodeCoreAPI (create/connect/set_params)
│  │  │  ├─ graph.py                 # Graph, NodeId, Connection
│  │  │  ├─ node_registry.py         # Registry pattern
│  │  │  └─ node_factory.py          # Factory pattern
│  │  ├─ base/                       # NodeBase, Parameter, NodeMetadata
│  │  ├─ implementations/            # concrete nodes (samplers/loaders/…)
│  │  └─ validators/                 # node/parameter validators
│  │
│  ├─ workflows/
│  │  ├─ manager/
│  │  │  └─ workflow_manager.py      # Orchestrates load→validate→execute
│  │  ├─ loader/
│  │  │  ├─ workflow_loader.py       # loads JSON/template
│  │  │  ├─ json_loader.py
│  │  │  └─ template_loader.py
│  │  ├─ templates/
│  │  │  ├─ repository.py            # list/get templates
│  │  │  └─ model.py                 # WorkflowTemplate
│  │  └─ compiler/
│  │     └─ comfy_compiler.py        # Graph→ComfyUI JSON (IGraphCompiler)
│  │
│  ├─ executors/
│  │  ├─ executor_factory.py         # chooses Local/Remote/Plugin
│  │  ├─ local/local_executor.py     # uses ComfyServerManager + Connector
│  │  ├─ remote/remote_executor.py   # given base_url token
│  │  └─ plugin/farm_executor.py     # abstract hook (implemented out-of-tree)
│  │
│  ├─ connectors/
│  │  ├─ comfy/
│  │  │  ├─ server_manager.py        # start/stop/healthcheck local ComfyUI
│  │  │  ├─ rest_client.py           # HTTP POST wrappers
│  │  │  ├─ ws_client.py             # WebSocket events → observers
│  │  │  └─ connector.py             # ComfyConnector (adapts both)
│  │  └─ session.py                  # auth headers, retries, timeouts
│  │
│  ├─ handlers/                      # input/output/caching
│  │  ├─ input/ ...
│  │  └─ output/ ...
│  │
│  ├─ services/
│  │  ├─ config_manager.py
│  │  ├─ logging_service.py
│  │  ├─ progress_service.py         # Observer hub
│  │  └─ validation_service.py       # graph/node/param checks
│  │
│  ├─ api/                           # thin façade for external callers
│  │  ├─ workflow_api.py
│  │  ├─ execution_api.py
│  │  └─ query_api.py
│  │
│  ├─ cli/
│  │  ├─ main.py                     # entry point `comfy`
│  │  ├─ run_cmd.py
│  │  ├─ validate_cmd.py
│  │  ├─ templates_cmd.py
│  │  └─ gui_cmd.py
│  │
│  ├─ ui/qt/
│  │  ├─ views/                      # MainWindow, panels
│  │  ├─ viewmodels/                 # MVVM models (QAbstractItemModel)
│  │  ├─ controllers/                # RunController, TemplateController
│  │  └─ theme/                      # QSS + ThemeManager
│  │
│  └─ utils/                         # path/file/json/process/net helpers
│
├─ plugins/                          # OPTIONAL external packages go here
│  └─ (e.g. comfyui_remote_dneg/)    # farm executor/provider out-of-tree
└─ ...
```

> **Note:** No DNEG “CARDS/Tractor” code in this repo. Those live in `plugins/comfyui_remote_dneg` (separate package) implementing `IExecutor` or a `FarmProvider`.

---

## 3) Classes, responsibilities, main methods, patterns

### Node Core (single façade for all node concerns)

* **`NodeCoreAPI` (Facade)**

  * `create_node(type_name, **kwargs) -> INode`
  * `connect(from_id, from_port, to_id, to_port)`
  * `set_params(node_id, params: dict)`
  * `list_parameters(node_id) -> dict`
  * `graph_ref() -> Graph`
  * **Uses:** `NodeFactory`, `NodeRegistry`, `Graph`
  * **Why:** Workflow code never manipulates raw JSON.

* **`Graph` (Aggregate root)**

  * `add_node(node)`, `connect(a,ap,b,bp)`, `get_node(id)`
  * `iter_nodes()`, `iter_connections()`

* **`NodeRegistry` (Registry)**

  * `register(name, cls)`, `get(name)`, `all()`

* **`NodeFactory` (Factory)**

  * `create(name, **kwargs) -> INode`

* **`NodeBase` (Domain)**

  * `inputs()`, `outputs()`, `set_param(name, value)`, `get_param(name)`

### Workflows

* **`WorkflowLoader`**

  * `load_from_json(path) -> LoadedSpec`
  * `load_from_template(template_id) -> LoadedSpec`
  * Hydrates via `NodeCoreAPI` to build the `Graph`.

* **`WorkflowTemplate` + `TemplateRepository`**

  * `list() -> [TemplateInfo]`, `get(id) -> WorkflowTemplate`

* **`ComfyCompiler` (IGraphCompiler)**

  * `compile(graph: Graph, ctx: ExecutionContext) -> dict` (payload)

* **`WorkflowManager` (Orchestrator)**

  * `load_workflow(src)`  (json or template)
  * `apply_params(overrides: dict)` (dict-style assignment)
  * `validate()`  (uses `ValidationService`)
  * `execute(ctx: ExecutionContext) -> RunHandle`
  * `on_progress(cb)`, `cancel(handle_id)`, `results(handle_id)`

### Execution

* **`ExecutorBase` (Strategy + Template Method)**

  * `prepare(graph, ctx)`, `submit(graph, ctx) -> handle_id`
  * `poll(handle_id) -> dict`, `collect(handle_id) -> artifacts`
  * `cancel(handle_id)`
  * `execute(graph, ctx) -> artifacts`  (calls prepare→submit→poll→collect)

* **`LocalExecutor`**

  * Starts **`ComfyServerManager`** if needed
  * Uses `ComfyConnector` to POST workflow + stream progress

* **`RemoteExecutor`**

  * Given `base_url` & token from config; no local server

* **`ExecutorFactory`**

  * `create(mode: str, ctx) -> IExecutor`  (mode = local|remote|farm)
  * Loads farm plugins via entry points if requested

* **(Plugin) `FarmExecutor`**

  * Implemented in external package (e.g., DNEG); same IExecutor surface

* **`ExecutionContext`**

  * `mode`, `run_id`, `work_dir`, `base_url`, `auth`, `env`, `extras`

### Connectors (Comfy)

* **`ComfyServerManager`**

  * `start(opts) -> ServerHandle` (port, pid, log\_path)
  * `stop(handle)`, `is_running(handle)`, `port(handle)`, `healthcheck(handle)`
  * Waits on ready via HTTP ping; no global singletons.

* **`ComfyRestClient`**

  * `post(endpoint, json) -> dict`, `get(endpoint) -> dict`
  * Retries, timeouts, error mapping

* **`ComfyWsClient`**

  * `open(url)`, `subscribe(job_id, observer)`, `close()`

* **`ComfyConnector` (Adapter over HTTP + WS)**

  * `open()`, `post_workflow(payload) -> job_id`
  * `subscribe(job_id, observer)`
  * `status(job_id) -> dict`, `fetch_outputs(job_id) -> dict`
  * `cancel(job_id)`, `close()`

### Services

* **`ValidationService` (Rules Engine)**

  * `validate_graph(graph)`
  * `validate_node(node)`
  * `validate_params(node, params)`

* **`ProgressService` (Observer Hub)**

  * `subscribe(obs)`, `unsubscribe(obs)`, `publish(event)`

* **`OutputHandler`**

  * `plan_outputs(graph) -> dict`
  * `store(handle_id, artifacts) -> dict`
  * `paths(handle_id) -> dict`

* **`ConfigManager` / `LoggingService`**

  * Profiles, layered config, loggers/formatters/handlers

### API (public façade)

* **`WorkflowAPI`**

  * `list_templates()`, `load(src)`, `parameters()`, `set_params(dict)`

* **`ExecutionAPI`**

  * `run(ctx) -> handle`, `progress(handle)`, `cancel(handle)`, `results(handle)`

* **`QueryAPI`**

  * `describe_graph()`, `list_nodes()`, `get_node(id)`

### CLI (scriptable)

* `comfy run -w workflow.json -p params.yaml --mode local --server auto`
* `comfy run -t template_id -p params.yaml --mode farm --provider dneg`
* `comfy validate -w workflow.json`
* `comfy templates list|show <id>`
* `comfy gui`

### Qt UI (MVVM, themed)

* **Views:** `MainWindow`, `TemplateBrowser`, `ParameterPanel`, `ProgressPane`, `RunHistory`
* **ViewModels:** `WorkflowViewModel`, `ParametersModel` (QAbstractTableModel), `RunsModel`
* **Controllers:** `RunController` (talks to `WorkflowManager`), `TemplateController`
* **ThemeManager:** loads QSS from `/ui/qt/theme/`, no hardcoded styles
* **Background work:** QThreadPool / QRunnable; UI subscribes to `ProgressService`

---

## 4) One-graph PlantUML (compiles)

```plantuml
@startuml
title comfyui-remote - End-State Class Architecture (One Graph)

/' ===== Interfaces ===== '/
interface INode
interface IExecutor
interface IConnector
interface IProgressObserver
interface IGraphCompiler

/' ===== Nodes & Graph ===== '/
abstract class NodeBase implements INode {
  - id : str
  - metadata : NodeMetadata
  + get_id() : str
  + inputs() : dict
  + outputs() : dict
  + set_param(name : str, value)
  + get_param(name : str)
}

class NodeMetadata {
  + type : str
  + label : str
  + category : str
}

class Parameter {
  + name : str
  + type : str
  + default_value
  + validate(value) : bool
}

class Connection {
  + out_node_id : str
  + out_port : str
  + in_node_id : str
  + in_port : str
}

class Graph {
  - nodes : dict
  - connections : list
  + add_node(node : INode)
  + connect(a_id : str, a_port : str, b_id : str, b_port : str)
  + get_node(id : str) : INode
  + iter_nodes() : list
  + iter_connections() : list
}

class NodeRegistry {
  - types : dict
  + register(name : str, cls)
  + get(name : str)
  + all() : list
}

class NodeFactory {
  - registry : NodeRegistry
  + create(name : str, kwargs : dict) : INode
}

class NodeCoreAPI {
  - registry : NodeRegistry
  - factory : NodeFactory
  - graph : Graph
  + create_node(type_name : str, kwargs : dict) : INode
  + connect(from_id : str, from_port : str, to_id : str, to_port : str)
  + set_params(node_id : str, params : dict)
  + list_parameters(node_id : str) : dict
  + graph_ref() : Graph
}

/' ===== Workflows ===== '/
class WorkflowTemplate {
  + id : str
  + name : str
  + meta : dict
  + defaults : dict
}

class TemplateRepository {
  + list() : list
  + get(id : str) : WorkflowTemplate
}

class WorkflowLoader {
  + load_from_json(path : str)
  + load_from_template(tpl : WorkflowTemplate)
}

class ComfyCompiler implements IGraphCompiler {
  + compile(graph : Graph, ctx : ExecutionContext) : dict
}

class WorkflowManager {
  - node_api : NodeCoreAPI
  - validator : ValidationService
  - config : ConfigManager
  - progress : ProgressService
  - output : OutputHandler
  - compiler : IGraphCompiler
  - executor : IExecutor
  + load_workflow(src)
  + apply_params(overrides : dict)
  + validate()
  + execute(ctx : ExecutionContext) : dict
  + on_progress(cb)
  + cancel(handle_id : str)
  + results(handle_id : str) : dict
}

/' ===== Execution ===== '/
class ExecutionContext {
  + mode : str
  + work_dir : str
  + base_url : str
  + auth : dict
  + env : dict
  + extras : dict
}

abstract class ExecutorBase implements IExecutor {
  - connector : IConnector
  + prepare(graph : Graph, ctx : ExecutionContext)
  + submit(graph : Graph, ctx : ExecutionContext) : str
  + poll(handle_id : str) : dict
  + cancel(handle_id : str)
  + collect(handle_id : str) : dict
  + execute(graph : Graph, ctx : ExecutionContext) : dict
}

class LocalExecutor extends ExecutorBase
class RemoteExecutor extends ExecutorBase
class ExecutorFactory {
  + create(mode : str, ctx : ExecutionContext) : IExecutor
}

/' ===== Connectors (Comfy) ===== '/
class ComfyServerManager {
  + start(opts : dict) : ServerHandle
  + stop(handle : ServerHandle)
  + is_running(handle : ServerHandle) : bool
  + port(handle : ServerHandle) : int
  + healthcheck(handle : ServerHandle) : bool
}

class ServerHandle {
  + pid : int
  + port : int
  + log_path : str
}

class ComfyRestClient {
  - base_url : str
  + post(endpoint : str, json : dict) : dict
  + get(endpoint : str) : dict
}

class ComfyWsClient {
  + open(url : str)
  + subscribe(job_id : str, observer : IProgressObserver)
  + close()
}

class ComfyConnector implements IConnector {
  - rest : ComfyRestClient
  - ws : ComfyWsClient
  + open()
  + post_workflow(payload : dict) : str
  + subscribe(job_id : str, observer : IProgressObserver)
  + status(job_id : str) : dict
  + fetch_outputs(job_id : str) : dict
  + cancel(job_id : str)
  + close()
}

/' ===== Services ===== '/
class ValidationService {
  + validate_graph(graph : Graph)
  + validate_node(node : INode)
  + validate_params(node : INode, params : dict)
}

class ProgressService {
  - observers : set
  + subscribe(obs : IProgressObserver)
  + unsubscribe(obs : IProgressObserver)
  + publish(event : dict)
}

class OutputHandler {
  + plan_outputs(graph : Graph) : dict
  + store(handle_id : str, artifacts : dict) : dict
  + paths(handle_id : str) : dict
}

class ConfigManager {
  + get(path : str, default_value)
  + profile() : str
}

class LoggingService {
  + get_logger(name : str)
}

class WMProgressObserver implements IProgressObserver {
  + update(event : dict)
}

/' ===== API ===== '/
class WorkflowAPI {
  + list_templates()
  + load(src)
  + parameters()
  + set_params(d : dict)
}
class ExecutionAPI {
  + run(ctx : ExecutionContext) : str
  + progress(handle_id : str) : list
  + cancel(handle_id : str)
  + results(handle_id : str) : dict
}
class QueryAPI {
  + describe_graph() : dict
  + list_nodes() : list
  + get_node(id : str) : dict
}

/' ===== CLI ===== '/
class RunCommand {
  + run(args)
}
class ValidateCommand {
  + run(args)
}
class TemplatesCommand {
  + run(args)
}
class GuiCommand {
  + run(args)
}

/' ===== UI (Qt, MVVM) ===== '/
class MainWindow
class TemplateBrowser
class ParameterPanel
class ProgressPane
class WorkflowViewModel
class ParametersModel
class RunsModel
class RunController
class ThemeManager

/' ===== Relationships ===== '/
NodeFactory --> NodeRegistry
NodeCoreAPI *-- Graph
NodeCoreAPI --> NodeFactory
NodeBase --> Parameter
Graph o-- INode
Graph o-- Connection

WorkflowManager --> NodeCoreAPI
WorkflowManager --> ValidationService
WorkflowManager --> ConfigManager
WorkflowManager --> OutputHandler
WorkflowManager --> ProgressService
WorkflowManager --> IGraphCompiler
WorkflowManager --> IExecutor

ExecutorBase --> IConnector
LocalExecutor --> ComfyServerManager
LocalExecutor --> ComfyConnector
RemoteExecutor --> ComfyConnector
ExecutorFactory --> LocalExecutor
ExecutorFactory --> RemoteExecutor

ComfyConnector --> ComfyRestClient
ComfyConnector --> ComfyWsClient

ProgressService o-- IProgressObserver
WMProgressObserver ..|> IProgressObserver
WorkflowManager --> WMProgressObserver

WorkflowAPI --> WorkflowManager
ExecutionAPI --> WorkflowManager
QueryAPI --> WorkflowManager

RunCommand --> WorkflowManager
ValidateCommand --> WorkflowLoader
TemplatesCommand --> TemplateRepository
GuiCommand --> MainWindow

MainWindow --> WorkflowViewModel
MainWindow --> RunController
TemplateBrowser --> WorkflowViewModel
ParameterPanel --> ParametersModel
ProgressPane --> RunsModel
RunController --> WorkflowManager
ThemeManager --> MainWindow
@enduml
```

---

## 5) Lifecycles

**Local run**

1. CLI/UI → `WorkflowManager.load_workflow()`
2. `NodeCoreAPI` builds `Graph`
3. `apply_params()` → `validate()`
4. `ExecutorFactory.create("local")` → `LocalExecutor`
5. `LocalExecutor.prepare()` → `ComfyServerManager.start()` if not running
6. `ComfyCompiler.compile(Graph)` → payload
7. `ComfyConnector.post_workflow(payload)`; `subscribe(job_id, ProgressService)`
8. `collect()` → `OutputHandler.store()` → `results()`

**Remote run**

* Same, but `RemoteExecutor` skips server manager, uses configured `base_url`.

**Farm run (plugin)**

* `ExecutorFactory` discovers plugin (entry points) → returns provider’s `FarmExecutor`.
* Farm code is **out-of-tree**; same `IExecutor` surface.

---

## 6) CLI surface (examples)

```bash
# local, auto-start server if needed
comfy run --workflow wf.json --params params.yaml --mode local --server auto

# remote service
comfy run --template txt2img --params params.yaml --mode remote --url http://comfy:8188 --token $TOKEN

# validate only
comfy validate --workflow wf.json

# browse templates
comfy templates list
comfy templates show txt2img

# launch UI
comfy gui
```

* `--params` supports YAML/JSON.
* Overrides via `--set Steps=50 --set Seed=12345` also map to `apply_params()`.

---

## 7) Qt UI (clean OOP, no hardcoded styles)

* **Pattern:** MVVM.
* **Threading:** all execution in background workers; UI subscribes to `ProgressService`.
* **Styling:** QSS in `/ui/qt/theme/`, loaded by `ThemeManager` at startup (light/dark profiles).
* **Views:** `MainWindow` hosts `TemplateBrowser`, `ParameterPanel`, `ProgressPane`.
* **ViewModels:** `WorkflowViewModel` exposes selected template & graph; `ParametersModel` exposes editable params; `RunsModel` exposes current/previous runs.
* **Controllers:** `RunController` coordinates with `WorkflowManager`.

---

